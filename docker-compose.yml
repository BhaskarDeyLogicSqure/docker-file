version: '3.8'
services:
  app:
    image: myapp:latest
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    environment:
      - NODE_ENV=production
    volumes:
      - ./app:/usr/src/app
    networks:
      - mynetwork
  db:
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - mynetwork
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - mynetwork
networks:
  mynetwork:
    driver: bridge
volumes:
  db_data:
    driver: local
    driver_opts:
      type: none
      device: /path/to/your/local/db_data
      o: bind
# This docker-compose file sets up a multi-container application with an app, a PostgreSQL database, and a Redis cache.
# The app service is built from a Dockerfile in the current directory and exposes port 8080.
# The database service uses a named volume for persistent storage, and the Redis service exposes its default port.
# All services are connected to a custom bridge network for communication.
# Ensure to replace /path/to/your/local/db_data with the actual path on your host machine where you want to store the database data.
# Note: Make sure to have Docker and Docker Compose installed on your machine to run this configuration.  